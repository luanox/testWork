const fs = require("fs");
const path = require("path");
const { OpenAI } = require("openai");
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const outputPath = path.join(__dirname, "base_inteligencia_unificada.json");

// Novas intenÃ§Ãµes/exemplos a serem adicionados:
const novasIntencoes = [
  // EXTRATO PERIODO

  {
    "intencao": "registrar_saida",
    "frases": [
      "gastei 100 no mercado",
      "paguei 50 de gasolina",
      "comprei uma pizza por 70 ontem",
      "paguei a fatura do cartÃ£o de crÃ©dito",
      "gastei com delivery hoje",
      "fiz uma compra no cartÃ£o",
      "paguei aluguel dia 5",
      "saquei 300 da conta",
      "gastei com remÃ©dio semana passada",
      "paguei a escola da filha",
      "paguei 300 do aluguel",
      "comprei um celular de 1200 reais",
      "gastei 250 reais em roupas",
      "paguei academia 90 reais",
      "gastei 150 de combustÃ­vel"
    ]
  },
  {
    "intencao": "registrar_entrada",
    "frases": [
      "recebi 1200 do cliente",
      "entrou 500 da empresa",
      "ganhei 300 de comissÃ£o",
      "me pagaram 800 ontem",
      "salÃ¡rio caiu hoje",
      "depÃ³sito de 200 na conta",
      "recebi dinheiro do meu chefe",
      "venda de produto rendeu 600",
      "ganhei 100 de presente",
      "recebi pensÃ£o de 400",
      "comissÃ£o de vendas entrou",
      "salÃ¡rio depositado hoje",
      "recebi pagamento de consultoria",
      "entrou dinheiro da venda",
      "ganhei bÃ´nus de 150"
    ]
  },
  {
    "intencao": "consultar_saldo",
    "frases": [
      "quanto eu tenho disponÃ­vel?",
      "me mostra meu saldo",
      "qual meu saldo do mÃªs?",
      "saldo da semana",
      "tenho quanto na conta?",
      "saldo atual",
      "mostra o saldo do dia",
      "tem como ver saldo antigo?",
      "saldo disponÃ­vel agora",
      "quero saber meu saldo"
    ]
  },
  {
    "intencao": "consultar_extrato",
    "frases": [
      "me mostra o extrato desse mÃªs",
      "quero ver o resumo financeiro",
      "me envia o relatÃ³rio de gastos",
      "extrato do dia",
      "extrato semanal",
      "quais foram meus lanÃ§amentos este mÃªs?",
      "extrato do cartÃ£o",
      "relatÃ³rio financeiro completo",
      "extrato detalhado",
      "ver extrato do ano",
      "resumo do mÃªs passado"
    ]
  },
  {
    "intencao": "consultar_entradas",
    "frases": [
      "entradas desse mÃªs",
      "o que entrou esse mÃªs?",
      "quais foram as receitas?",
      "quanto recebi na semana?",
      "me mostra as entradas de janeiro",
      "todas as entradas de hoje",
      "recebimentos do mÃªs passado",
      "lista de receitas",
      "mostra os depÃ³sitos recebidos"
    ]
  },
  {
    "intencao": "consultar_saidas",
    "frases": [
      "saÃ­das do mÃªs passado",
      "o que gastei esse mÃªs?",
      "me mostra os gastos da semana",
      "todas as despesas de marÃ§o",
      "qual foi minha maior despesa do mÃªs?",
      "mostra tudo que paguei",
      "gastos de ontem",
      "despesas do ano",
      "lista de pagamentos realizados"
    ]
  },
  {
    "intencao": "consultar_maior_gasto",
    "frases": [
      "com o que mais gastei esse mÃªs?",
      "maior despesa do mÃªs",
      "onde foi meu maior gasto?",
      "qual o maior gasto do ano?",
      "top gasto de abril",
      "gasto mais alto da semana",
      "maior valor gasto",
      "meu maior gasto do semestre"
    ]
  },
  {
    "intencao": "consultar_maior_entrada",
    "frases": [
      "maior entrada do mÃªs",
      "qual foi minha maior receita?",
      "onde ganhei mais dinheiro esse mÃªs?",
      "entrada mais alta de janeiro",
      "maior valor recebido",
      "melhor entrada do semestre",
      "qual foi meu melhor recebimento?"
    ]
  },
  {
    "intencao": "registrar_agendamento",
    "frases": [
      "me lembre de pagar a luz dia 5",
      "agendar aluguel de 1500 para todo dia 10",
      "cadastrar academia como despesa fixa dia 8",
      "agendar consulta mÃ©dica para dia 14/06 Ã s 15h",
      "me avisa do boleto que vence dia 15",
      "programa para avisar do aluguel dia 1Âº",
      "tenho que receber do cliente dia 20",
      "anota que tenho que pagar aluguel dia 10",
      "me lembra de pagar internet na segunda",
      "programa lembrete para consulta sexta que vem"
    ]
  },
  {
    "intencao": "consultar_agendamentos",
    "frases": [
      "o que tenho agendado para essa semana?",
      "me mostra meus compromissos do mÃªs",
      "quais contas fixas vencem amanhÃ£?",
      "tem algum agendamento para hoje?",
      "prÃ³ximos lembretes de pagamento",
      "compromissos futuros",
      "prÃ³ximas contas para pagar",
      "lista de agendamentos do mÃªs"
    ]
  },
  {
    "intencao": "deletar_registro",
    "frases": [
      "quero apagar um lanÃ§amento",
      "posso deletar uma entrada?",
      "remover gasto do mÃªs passado",
      "apague os registros de janeiro",
      "excluir o boleto pago dia 12",
      "limpar todos os dados desse mÃªs",
      "quero deletar todas as despesas de abril",
      "apaga meus registros antigos",
      "deleta as movimentaÃ§Ãµes de marÃ§o"
    ]
  },
  {
    "intencao": "editar_registro",
    "frases": [
      "quero mudar o valor do aluguel",
      "como altero uma conta?",
      "editar data do pagamento",
      "corrigir um lanÃ§amento antigo",
      "ajustar registro antigo",
      "quero corrigir um lanÃ§amento errado",
      "alterar valor de despesa",
      "ajustar uma receita",
      "modificar lanÃ§amento passado"
    ]
  },
  {
    "intencao": "duvida_uso",
    "frases": [
      "como faz para registrar um gasto?",
      "me ensina a usar o sistema",
      "onde vejo meus lanÃ§amentos antigos?",
      "tem como exportar para excel?",
      "como cadastro conta fixa?",
      "como agendar um lembrete?",
      "o que acontece se esquecer de pagar uma conta?",
      "para que serve a aba extrato?",
      "como funciona o autowork ia?",
      "explica como registrar uma venda"
    ]
  }
];

async function gerarEmbedding(texto) {
  const response = await openai.embeddings.create({
    model: "text-embedding-ada-002",
    input: texto
  });
  return response.data[0].embedding;
}

async function atualizarBase() {
  let resultado = [];

  // 1. Carrega base existente, se existir
  if (fs.existsSync(outputPath)) {
    resultado = JSON.parse(fs.readFileSync(outputPath));
  }

  // 2. Adiciona novas frases/intenÃ§Ãµes (evitando duplicados)
  for (const item of novasIntencoes) {
    for (const frase of item.frases) {
      // Verifica se jÃ¡ existe frase igual para a intenÃ§Ã£o
      if (!resultado.some(reg => reg.intencao === item.intencao && reg.frase === frase)) {
        console.log(`ðŸ§  Embedding: [${item.intencao}] â†’ "${frase}"`);
        const embedding = await gerarEmbedding(frase);
        resultado.push({
          intencao: item.intencao,
          frase,
          embedding
        });
      } else {
        console.log(`ðŸ”Ž Pulando frase jÃ¡ existente: [${item.intencao}] â†’ "${frase}"`);
      }
    }
  }

  fs.writeFileSync(outputPath, JSON.stringify(resultado, null, 2));
  console.log("\nâœ… base_inteligencia_unificada.json atualizado com sucesso!");
}

atualizarBase();
