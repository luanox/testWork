const agent = require('../agent/agent'); // ajuste se necess√°rio
const moment = require('moment');
const fs = require('fs');

const user_id = '553299642181';
const logFile = 'log_teste_autowork_ia.txt';
let logOutput = '=== INICIANDO TESTES AUTOWORK IA ===\n\n';

const testes = [
  // ... (os mesmos testes do exemplo anterior)
  { desc: 'Registro de entrada atual', frase: 'recebi 1200 de sal√°rio hoje' },
  { desc: 'Registro de sa√≠da atual', frase: 'paguei 350 de aluguel hoje' },
  { desc: 'Registro de entrada antiga', frase: `recebi 500 de cliente dia ${moment().subtract(12, 'days').format('DD/MM/YYYY')}` },
  { desc: 'Registro de sa√≠da antiga', frase: `gastei 200 no mercado dia ${moment().subtract(14, 'days').format('DD/MM/YYYY')}` },
  { desc: 'Registro de entrada futura', frase: `vou receber 700 de comiss√£o dia ${moment().add(8, 'days').format('DD/MM/YYYY')}` },
  { desc: 'Registro de sa√≠da futura', frase: `preciso pagar 450 de cart√£o dia ${moment().add(10, 'days').format('DD/MM/YYYY')}` },
  { desc: 'Saldo m√™s atual', frase: 'saldo desse m√™s' },
  { desc: 'Saldo m√™s anterior', frase: 'saldo do m√™s passado' },
  { desc: 'Saldo dos √∫ltimos 7 dias', frase: `saldo do per√≠odo de ${moment().subtract(7, 'days').format('DD/MM/YYYY')} a ${moment().format('DD/MM/YYYY')}` },
  { desc: 'Extrato m√™s atual', frase: 'extrato desse m√™s' },
  { desc: 'Extrato m√™s passado', frase: 'extrato do m√™s passado' },
  { desc: 'Extrato dos √∫ltimos 7 dias', frase: `extrato do per√≠odo de ${moment().subtract(7, 'days').format('DD/MM/YYYY')} a ${moment().format('DD/MM/YYYY')}` },
  { desc: 'Extrato de hoje', frase: 'extrato do dia' },
  { desc: 'Entradas do m√™s', frase: 'entradas desse m√™s' },
  { desc: 'Sa√≠das do m√™s', frase: 'sa√≠das desse m√™s' },
  { desc: 'Entradas m√™s passado', frase: 'entradas do m√™s passado' },
  { desc: 'Sa√≠das m√™s passado', frase: 'sa√≠das do m√™s passado' },
];

(async () => {
  for (let i = 0; i < testes.length; i++) {
    const t = testes[i];
    const debugLog = [];
    try {
      const resposta = await agent(user_id, t.frase, debugLog);

      // Monta o texto do log
      logOutput += `\n[${i + 1}] üìå ${t.desc}\n`;
      logOutput += `Frase: ${t.frase}\n`;
      logOutput += `Resposta: ${resposta.resposta}\n`;
      logOutput += `‚Ü™Ô∏è Inten√ß√£o: ${resposta.resultado && resposta.resultado.intencao}\n`;
      if (resposta.resultado && resposta.resultado.valor)
        logOutput += `‚Ü™Ô∏è Valor: ${resposta.resultado.valor}\n`;
      if (resposta.resultado && resposta.resultado.data)
        logOutput += `‚Ü™Ô∏è Data: ${resposta.resultado.data}\n`;
      if (debugLog.length > 0)
        logOutput += `‚Ü™Ô∏è Debug: ${debugLog.map(etapa => etapa.etapa).join(' > ')}\n`;
      // Para log completo:
      // logOutput += `‚Ü™Ô∏è Debug Completo: ${JSON.stringify(debugLog, null, 2)}\n`;
    } catch (e) {
      logOutput += `Erro ao testar [${t.desc}]: ${e.message}\n`;
    }
  }

  logOutput += '\n=== FIM DOS TESTES ===\n';

  // Exibe no console e salva no arquivo
  console.log(logOutput);
  fs.writeFileSync(logFile, logOutput, 'utf8');
  console.log(`\nLog salvo em: ${logFile}`);
})();
